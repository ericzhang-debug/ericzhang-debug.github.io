[{"title":"树总结（二）——搜索二叉树","date":"2024-04-10T14:08:26.000Z","url":"/2024/04/10/%E6%A0%91%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E6%90%9C%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/","tags":[["数据结构","/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"],["学习","/tags/%E5%AD%A6%E4%B9%A0/"],["树","/tags/%E6%A0%91/"]],"categories":[["数据结构","/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"]],"content":"特点二叉搜索树（Binary Search Tree）也叫二叉查找树，他是具有下列性质的一种二叉树。 若左子树不空，则左子树上所有节点的值都小于根节点的值； 若右子树不空，则右子树上所有节点的值都大于根节点的值； 任意节点的子树也都是二叉搜索树； 中序遍历结果一定是有序的，而且是从小到大排序的 相关操作这里的二叉树采用链式存储，函数采用递归函数的方式。 搜索二叉树的定义 方法实现插入 搜索 获取最大元找右子树找到底 获取最小元找左子树找到底 "},{"title":"Spring Data JPA整合连接达梦数据库","date":"2024-04-07T12:39:27.000Z","url":"/2024/04/07/Spring-Data-JPA%E6%95%B4%E5%90%88%E8%BF%9E%E6%8E%A5%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93/","categories":[[" ",""]]},{"title":"树总结（一）——基本内容","date":"2024-04-06T14:02:15.000Z","url":"/2024/04/06/%E6%A0%91%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%86%85%E5%AE%B9/","tags":[["数据结构","/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"],["学习","/tags/%E5%AD%A6%E4%B9%A0/"],["树","/tags/%E6%A0%91/"]],"categories":[["数据结构","/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"]],"content":"原理树是一种数据结构，它是由n(n≥0)个有限节点组成一个具有层次关系的集合。把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点： 每个节点有零个或多个子节点；没有父节点的节点称为根节点；每一个非根节点有且只有一个父节点；除了根节点外，每个子节点可以分为多个不相交的子树。 树的根结点没有前驱，除根结点外的所有结点有且只有一个前驱。 相关概念祖先节点: 根到结点的唯一路径上的所有结点 兄弟节点: 有相同双亲的结点 结点的度: 树中一个结点的孩子个数 树的度: 树中结点的最大度数 结点的深度: 从根结点开始自顶向下逐层累加的。 结点的高度: 从叶结点开始自底向上逐层累加的。 树的高度(或深度): 树中结点的最大层数。 有序树和无序树: 树中结点的各子树从左到右是有次序的,不能互换,称该树为有序树,否则称为无序树。假设图为有序树,若将子结点位置互换,则变成一棵不同的树。 森林: m (m≥0)棵互不相交的树的集合。森林的概念与树的概念十分相近，因为只要把树的根结点删去就成了森林。反之，只要给m棵独立的树加上一个结点，并把这m棵树作为该结点的子树，则森林就变成了树。 二叉树特点 二叉树每个结点的度最多为2 结点的子树有左右之分，不能随意调换，调换后又是一棵新的二叉树。 三种特殊形态 相关计算NULL 完全二叉树最少的节点个数是2^(h - 1)，最多的节点个数是2^n-1（此时是满二叉树状态） 树的存储二叉树：孩子兄弟表示法 树的创建层序创建需要借助队列 遍历方法 X序遍历指的是根节点的位置 中序遍历：左-中-右 前序遍历：中-左-右 后序遍历：左-右-中 中序遍历递归实现实现简单，效率较低 非递归实现实现稍复杂，效率稍高 需要借助栈 前序遍历递归实现 后序遍历递归实现 层序遍历非递归实现需要借助队列 相关操作获取所有的叶子节点 获取树的高度"},{"title":"队列总结","date":"2024-04-06T07:40:56.000Z","url":"/2024/04/06/%E9%98%9F%E5%88%97%E6%80%BB%E7%BB%93/","tags":[["数据结构","/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"],["学习","/tags/%E5%AD%A6%E4%B9%A0/"],["队列","/tags/%E9%98%9F%E5%88%97/"]],"categories":[["数据结构","/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"]],"content":"原理队列（Queue），是一种操作受限的线性表，只允许在表的一端进行插入，而在表的另一端进行删除。向队列中插入元素称为入队或进队；删除元素称为出队或离队。其操作特性为先进先出（First In First Out，FIFO），并且只允许在队尾进，队头出。 常见实现方法通过数组实现通过数组实现，用head和tail分别表示指向的位置 优点：实现简单 缺点： 需要在创建前确定最大容量 当pop出元素的时候，该空间不可再继续使用，空间利用率较低，而且是一次性的 判满标志：rear&#x3D;MAXSize-1 判空标志：rear&#x3D;head 代码实现 通过链表实现原理和数组实现的队列相类似 优点： 不需要在创建时确定容量，容量可变 更加灵活 缺点： 实现复杂 非连续存储 判满标志：NULL 判空标志：head-&gt;next &#x3D;&#x3D; nullptr;(带有空头节点的) 代码实现(带有空头节点的) 循环队列为了解决数组实现的队列存在的假溢出和空间利用率低下的问题，可以通过循环队列解决。循环队列可以理解为将队列的头和尾相链接起来，通过模运算等操作，当队头有空位而队尾满了的时候将tail接着指向队头前方的空位，实现空间的最大化利用。 优点： 数组实现队列，实现起来较为简单 实现空间的高效利用 解决假溢出问题 坑点： 求模运算的时候有时候会搞错 可用空间是数组长度-1，预留的一个是为了判断队列满的状态。 在插入数据的时候必须先检查队列是否已满！！！ 判空标志：rear&#x3D;head; 判满 如果数组的空间全部占满，则rear&#x3D;head是无法判断队列空和满的状态，因此需要预留一个空位来实现判满的操作，当循环队列是满的时候，则(tail+1)MOD(MAXSize)&#x3D;head 代码实现"},{"title":"栈总结","date":"2024-04-05T09:25:23.000Z","url":"/2024/04/05/%E6%A0%88%E6%80%BB%E7%BB%93/","tags":[["栈","/tags/%E6%A0%88/"],["数据结构","/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"],["学习","/tags/%E5%AD%A6%E4%B9%A0/"]],"categories":[["数据结构","/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"]],"content":"原理栈是一种特殊的线性表，其只允许在固定的一端进行插入和删除元素操作。进行数据插入和删除操作的一端称为栈顶，另一端称为栈底。栈中的数据元素遵守后进先出LIFO（Last In First Out）的原则。 向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。 常见的实现通过数组实现通过index指针来实现对元素的访问 优点： 实现简单 内存存储连续 随机访问 缺点：容量固定，而且难以修改 通过链表实现用链表替代数组的作用，通过index指针来实现对元素的访问优点： 容量不限制 更加灵活 缺点： 实现复杂 内存空间不连续 常见的应用括号匹配检查利用栈结构，扫描字符串，遇到左括号就压栈，遇到右括号就退栈 中缀表达式转后缀表达式 后缀表达式计算"},{"title":"链表总结","date":"2024-04-05T08:09:26.000Z","url":"/2024/04/05/%E9%93%BE%E8%A1%A8%E6%80%BB%E7%BB%93/","tags":[["数据结构","/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"],["学习","/tags/%E5%AD%A6%E4%B9%A0/"],["链表","/tags/%E9%93%BE%E8%A1%A8/"]],"categories":[["数据结构","/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"]],"content":"原理链表是一种物理存储结构上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。 由一系列节点（Node）通过指针连接而成，从一个头节点（Head）开始，头节点作为链表的入口点，它包含了对第一个节点的引用。头节点不存具体的内容，可以存储长度，使用头节点能够使得插入节点更加容易。最后一个节点的指针指向一个空值（NULL），表示链表的结束。 优点：链表的插入操作更快（头插），无需预先分配内存空间 缺点：失去了随机读取的优点（需要从头节点开始依次遍历，直到找到目标节点）。 创建插入 主要有两种插入方式： 头插法 p指针指向头节点 temp的next指向p-&gt;next-&gt;next p-&gt;next指向temp 尾插法 通过循环的方式将p指向结尾的节点 temp的next置为nullptr 结尾的节点的next指向temp 遍历通过条件为节点不是nullptr循环得到每个节点的值（注意第一个头节点） 删除 p指针指向需要删除的节点的前一个节点 p-&gt;next置为p-&gt;next-&gt;next 释放p-&gt;next的空间 代码实现这是最原始的版本，还是存在许许多多的问题的，没有加入泛型，data的类型仅仅是int "},{"title":"Arduino借助STM32Duino开发STM32完整教程","date":"2024-04-03T03:27:56.000Z","url":"/2024/04/03/Arduino%E5%80%9F%E5%8A%A9STM32Duino%E5%BC%80%E5%8F%91STM32%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/","tags":[["Arduino","/tags/Arduino/"],["嵌入式","/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"],["环境搭建","/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"]],"categories":[["硬件摸索","/categories/%E7%A1%AC%E4%BB%B6%E6%91%B8%E7%B4%A2/"]],"content":"前言目前，网络上大多数的讲述arduino开发stm32的教程都存在一定的问题（缺少一些关键步骤），以至于会产生误导，本人是看着这些教程一路走来的，通过我的相关搜索，而整理出的一套较为完善的教程。 开发环境搭建安装IDE前往官网下载Arduino IDE并安装，这里推荐Arduino IDE 2，有丰富的代码补全功能和更好看的UI以及DEBUG支持（本文可用） 安装开发板安装好IDE2之后，就需要添加开发板，这里我们使用最广泛的STM32Duino，目前已经基本适配所有的STM32芯片 打开Arduino的开发板管理器：文件 -&gt; 首选项 -&gt; 其他开发板管理地址，增加如下并保存： 接着在开发板处安装STM32芯片包的支持，一般选择最新版，注意看清楚是STM32，STM8：由于服务器在国外故此处安装时间较为漫长，有能力的小伙伴可以在首选项的网络选项卡中配置相关信息来提高速度等待安装结束之后，至此IDE部分的配置已经基本完成，但还不能够正常工作，需要配置烧录工具 配置烧录工具在开发STM32的时候通常采用SWD而非串口烧录，这里同样如此，需要使用烧录器ST-Link，官方的或是淘宝款的均可。 注意：这里指的是ST-Link，DAP-LINK等均无法使用，但并不是说绝对不能使用，但体验感较差，最后将会讲述使用DAP-LINK的方法，此部分均使用ST-Link，我也推荐使用ST-Link 安装驱动程序驱动程序采用ST官方的ST-Link驱动程序就可以，若在官网下载，对应STSW-LINK009，其他地方的也可以，看准系统版本对应即可安装好驱动之后插入STlink可以在设备管理器中看到设备正常工作： 配置烧录器这部分非常重要但很多的教程都忽略掉了，从而导致不能正常写入芯片程序去ST官网下载STM32CubeProgrammer 注意看清楚对应的系统，下载并安装打开之后可以看到连接到你的ST-Link，若是连接到开发板还可以看到芯片信息 这个程序我们主要是调用其CLI，因此安装上就可以了，平时开发的时候也很少直接打开 测试环境至此，开发环境的搭建已经完成，通常情况下，我们可以写一个点灯程序来测试我们的环境是否正常（此处我的板子是STM32F103ZET6） Arduino中创建空白工程 写入以下程序，开发板的LED灯写对应引脚，(我的开发板连接LED的是PE5) 在 工具 -&gt; 开发板 选择你的开发板芯片型号 在 工具 -&gt; Board Part Number处选择具体型号 在 工具 -&gt; Upload Method处选择STM32CubeProgrammer(SWD) 将开发板和ST-LINK通过SW的线序相连接：SWDIO、SWCLK、VCC、GND依次对应相接 编译、烧写均可以正常通过，速度非常快，可以看到LED闪烁 常见问题 arduino下能不能用HAL编程STM32duino就是基于HAL写的，基本支持HAL的库函数，能够正常编译例如通过拉低电平来开启PE5的LED灯 可以直接在Arduino中使用HAL写为 完全等效 arduino下如何配置时钟树？配置时钟树我们需要使用ST的HAL的API，在主程序中重载void SystemClock_Config(void)函数，并在void setup()中调用SystemClock_Config()对于这段代码可以自己编写但推荐的是通过STM32CubeMX图形化生成，并在main.c中复制得到 硬件串口无输出当测试到Arduino中按照正确的方式读写硬件串口时但没有任何消息输出，这种情况下大多是没有对应好引脚而造成的，例如我这块开发板就是这样的以下这段程序正常编写但没有任何输出 这里通过更改硬件串口对应的引脚解决参照开发板手册我们可以看到USART在PA9和PA10上代码更改为 即可解决 使用DAP-Link下载程序由于STM32Duino没有DAP-Link下载程序支持，需要先生成二进制文件然后通过DAP-Link的烧写程序加载烧录接着通过DAP-Link的烧写程序加载烧录 "},{"title":"XP连接高版本SQLServer提示：ConnectionOpen(SECDoClientHandShake())SSL安全错误解决方案","date":"2024-04-03T03:19:51.000Z","url":"/2024/04/03/XP%E8%BF%9E%E6%8E%A5%E9%AB%98%E7%89%88%E6%9C%ACSQLServer%E6%8F%90%E7%A4%BA%EF%BC%9AConnectionOpen-SECDoClientHandShake-SSL%E5%AE%89%E5%85%A8%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","tags":[["XP","/tags/XP/"],["SQLServer","/tags/SQLServer/"],["数据库","/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"],["兼容性","/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"]],"categories":[["编程随笔","/categories/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/"]],"content":"问题描述使用VB6等古董开发连接高版本SQLServer数据库（我这里是SqlServer2019）的程序时，使用向导配置会提示ConnectionOpen(SECDoClientHandShake())SSL安全错误，而无法正常读写 产生原因连接SQLServer是通过调用本地ODBC Sql Server驱动实现的，但是XP由于太过久远而不支持TLS1.1或者是1.2（具体不太清楚），XPSP3停止了更新，但是POSREADY2009持续更新了很长时间，这两个本质是一样的，也就是说可以通过修改系统借用一部分POSREADY2009的补丁从而让XP支持更新的TLS。 解决方案 下载这几个补丁文件：链接：百度云盘下载提取码：wxwa 按这个顺序依次导入注册表：PosReady –&gt; Enable TLS 1.x 安装补丁文件kb4019276 重启系统 参考文献SmartFTP - Enable TLS 1.2 on Windows XP"},{"title":"个人博客，卷土重来","date":"2024-04-03T02:36:32.000Z","url":"/2024/04/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8C%E5%8D%B7%E5%9C%9F%E9%87%8D%E6%9D%A5/","tags":[["博客","/tags/%E5%8D%9A%E5%AE%A2/"],["网站","/tags/%E7%BD%91%E7%AB%99/"]],"categories":[["个人博客","/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"]],"content":"前言这已经是我第n的博客建设了，在此之前的每一次的数据都随风飘散了。掐指一算，我的2015年的第一个站到现在已经足足有9年多了，这一次我把博客放到了GitHub上了，希望这一次能够长期存活下去了。 目前，网站各项功能还在建设ing… 博客历程： 2015.3 - 2015.7 Emlog 5.3.1 主机屋免费空间50MB 2015.7 - 2015.8 Emlog 5.3.1 阿里云ECS 1H1G1M 2015.8 - 2016.8 WordPress 景安2G免费空间 2016.8 - 2017.10 WordPress 万网共享500MB空间 2017.11 - 2018.10 Typecho 万网共享500MB空间 2018.12 - 2020 Hexo Coding Pages 2024.4 - ∞ Hexo GitHub Pages "},{"title":"Hello World","date":"2024-04-02T03:22:46.587Z","url":"/2024/04/02/hello-world/","categories":[[" ",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"}]
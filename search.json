[{"title":"链表总结","date":"2024-04-05T08:09:26.000Z","url":"/2024/04/05/%E9%93%BE%E8%A1%A8%E6%80%BB%E7%BB%93/","tags":[["链表","/tags/%E9%93%BE%E8%A1%A8/"],["数据结构","/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"],["学习","/tags/%E5%AD%A6%E4%B9%A0/"]],"categories":[["数据结构","/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"]],"content":"原理链表是一种物理存储结构上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。 由一系列节点（Node）通过指针连接而成，从一个头节点（Head）开始，头节点作为链表的入口点，它包含了对第一个节点的引用。头节点不存具体的内容，可以存储长度，使用头节点能够使得插入节点更加容易。最后一个节点的指针指向一个空值（NULL），表示链表的结束。 优点：链表的插入操作更快（头插），无需预先分配内存空间 缺点：失去了随机读取的优点（需要从头节点开始依次遍历，直到找到目标节点）。 创建插入 主要有两种插入方式： 头插法 p指针指向头节点 temp的next指向p-&gt;next-&gt;next p-&gt;next指向temp 尾插法 通过循环的方式将p指向结尾的节点 temp的next置为nullptr 结尾的节点的next指向temp 遍历通过条件为节点不是nullptr循环得到每个节点的值（注意第一个头节点） 删除 p指针指向需要删除的节点的前一个节点 p-&gt;next置为p-&gt;next-&gt;next 释放p-&gt;next的空间 代码实现这是最原始的版本，还是存在许许多多的问题的，没有加入泛型，data的类型仅仅是int "},{"title":"Arduino借助STM32Duino开发STM32完整教程","date":"2024-04-03T03:27:56.000Z","url":"/2024/04/03/Arduino%E5%80%9F%E5%8A%A9STM32Duino%E5%BC%80%E5%8F%91STM32%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/","tags":[["Arduino","/tags/Arduino/"],["嵌入式","/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"],["环境搭建","/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"]],"categories":[["硬件摸索","/categories/%E7%A1%AC%E4%BB%B6%E6%91%B8%E7%B4%A2/"]],"content":"前言目前，网络上大多数的讲述arduino开发stm32的教程都存在一定的问题（缺少一些关键步骤），以至于会产生误导，本人是看着这些教程一路走来的，通过我的相关搜索，而整理出的一套较为完善的教程。 开发环境搭建安装IDE前往官网下载Arduino IDE并安装，这里推荐Arduino IDE 2，有丰富的代码补全功能和更好看的UI以及DEBUG支持（本文可用） 安装开发板安装好IDE2之后，就需要添加开发板，这里我们使用最广泛的STM32Duino，目前已经基本适配所有的STM32芯片 打开Arduino的开发板管理器：文件 -&gt; 首选项 -&gt; 其他开发板管理地址，增加如下并保存： 接着在开发板处安装STM32芯片包的支持，一般选择最新版，注意看清楚是STM32，STM8：由于服务器在国外故此处安装时间较为漫长，有能力的小伙伴可以在首选项的网络选项卡中配置相关信息来提高速度等待安装结束之后，至此IDE部分的配置已经基本完成，但还不能够正常工作，需要配置烧录工具 配置烧录工具在开发STM32的时候通常采用SWD而非串口烧录，这里同样如此，需要使用烧录器ST-Link，官方的或是淘宝款的均可。 注意：这里指的是ST-Link，DAP-LINK等均无法使用，但并不是说绝对不能使用，但体验感较差，最后将会讲述使用DAP-LINK的方法，此部分均使用ST-Link，我也推荐使用ST-Link 安装驱动程序驱动程序采用ST官方的ST-Link驱动程序就可以，若在官网下载，对应STSW-LINK009，其他地方的也可以，看准系统版本对应即可安装好驱动之后插入STlink可以在设备管理器中看到设备正常工作： 配置烧录器这部分非常重要但很多的教程都忽略掉了，从而导致不能正常写入芯片程序去ST官网下载STM32CubeProgrammer 注意看清楚对应的系统，下载并安装打开之后可以看到连接到你的ST-Link，若是连接到开发板还可以看到芯片信息 这个程序我们主要是调用其CLI，因此安装上就可以了，平时开发的时候也很少直接打开 测试环境至此，开发环境的搭建已经完成，通常情况下，我们可以写一个点灯程序来测试我们的环境是否正常（此处我的板子是STM32F103ZET6） Arduino中创建空白工程 写入以下程序，开发板的LED灯写对应引脚，(我的开发板连接LED的是PE5) 在 工具 -&gt; 开发板 选择你的开发板芯片型号 在 工具 -&gt; Board Part Number处选择具体型号 在 工具 -&gt; Upload Method处选择STM32CubeProgrammer(SWD) 将开发板和ST-LINK通过SW的线序相连接：SWDIO、SWCLK、VCC、GND依次对应相接 编译、烧写均可以正常通过，速度非常快，可以看到LED闪烁 常见问题 arduino下能不能用HAL编程STM32duino就是基于HAL写的，基本支持HAL的库函数，能够正常编译例如通过拉低电平来开启PE5的LED灯 可以直接在Arduino中使用HAL写为 完全等效 arduino下如何配置时钟树？配置时钟树我们需要使用ST的HAL的API，在主程序中重载void SystemClock_Config(void)函数，并在void setup()中调用SystemClock_Config()对于这段代码可以自己编写但推荐的是通过STM32CubeMX图形化生成，并在main.c中复制得到 硬件串口无输出当测试到Arduino中按照正确的方式读写硬件串口时但没有任何消息输出，这种情况下大多是没有对应好引脚而造成的，例如我这块开发板就是这样的以下这段程序正常编写但没有任何输出 这里通过更改硬件串口对应的引脚解决参照开发板手册我们可以看到USART在PA9和PA10上代码更改为 即可解决 使用DAP-Link下载程序由于STM32Duino没有DAP-Link下载程序支持，需要先生成二进制文件然后通过DAP-Link的烧写程序加载烧录接着通过DAP-Link的烧写程序加载烧录 "},{"title":"XP连接高版本SQLServer提示：ConnectionOpen(SECDoClientHandShake())SSL安全错误解决方案","date":"2024-04-03T03:19:51.000Z","url":"/2024/04/03/XP%E8%BF%9E%E6%8E%A5%E9%AB%98%E7%89%88%E6%9C%ACSQLServer%E6%8F%90%E7%A4%BA%EF%BC%9AConnectionOpen-SECDoClientHandShake-SSL%E5%AE%89%E5%85%A8%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","tags":[["XP","/tags/XP/"],["SQLServer","/tags/SQLServer/"],["数据库","/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"],["兼容性","/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"]],"categories":[["编程随笔","/categories/%E7%BC%96%E7%A8%8B%E9%9A%8F%E7%AC%94/"]],"content":"问题描述使用VB6等古董开发连接高版本SQLServer数据库（我这里是SqlServer2019）的程序时，使用向导配置会提示ConnectionOpen(SECDoClientHandShake())SSL安全错误，而无法正常读写 产生原因连接SQLServer是通过调用本地ODBC Sql Server驱动实现的，但是XP由于太过久远而不支持TLS1.1或者是1.2（具体不太清楚），XPSP3停止了更新，但是POSREADY2009持续更新了很长时间，这两个本质是一样的，也就是说可以通过修改系统借用一部分POSREADY2009的补丁从而让XP支持更新的TLS。 解决方案 下载这几个补丁文件：链接：百度云盘下载提取码：wxwa 按这个顺序依次导入注册表：PosReady –&gt; Enable TLS 1.x 安装补丁文件kb4019276 重启系统 参考文献SmartFTP - Enable TLS 1.2 on Windows XP"},{"title":"个人博客，卷土重来","date":"2024-04-03T02:36:32.000Z","url":"/2024/04/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8C%E5%8D%B7%E5%9C%9F%E9%87%8D%E6%9D%A5/","tags":[["博客","/tags/%E5%8D%9A%E5%AE%A2/"],["网站","/tags/%E7%BD%91%E7%AB%99/"]],"categories":[["个人博客","/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"]],"content":"前言这已经是我第n的博客建设了，在此之前的每一次的数据都随风飘散了。掐指一算，我的2015年的第一个站到现在已经足足有9年多了，这一次我把博客放到了GitHub上了，希望这一次能够长期存活下去了。 目前，网站各项功能还在建设ing… 博客历程： 2015.3 - 2015.7 Emlog 5.3.1 主机屋免费空间50MB 2015.7 - 2015.8 Emlog 5.3.1 阿里云ECS 1H1G1M 2015.8 - 2016.8 WordPress 景安2G免费空间 2016.8 - 2017.10 WordPress 万网共享500MB空间 2017.11 - 2018.10 Typecho 万网共享500MB空间 2018.12 - 2020 Hexo Coding Pages 2024.4 - ∞ Hexo GitHub Pages "},{"title":"Hello World","date":"2024-04-02T03:22:46.587Z","url":"/2024/04/02/hello-world/","categories":[[" ",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"}]